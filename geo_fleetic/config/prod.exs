import Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.

# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :geo_fleetic, GeoFleeticWeb.Endpoint,
  url: [host: System.get_env("PHX_HOST") || "localhost", port: 80],
  cache_static_manifest: "priv/static/cache_manifest.json",
  check_origin: false,
  http: [
    port: String.to_integer(System.get_env("PORT") || "4000"),
    transport_options: [socket_opts: [:inet6]]
  ],
  server: true

# Configure your database
config :geo_fleetic, GeoFleetic.Repo,
  username: System.get_env("DB_USERNAME") || "postgres",
  password: System.get_env("DB_PASSWORD") || "postgres",
  hostname: System.get_env("DB_HOSTNAME") || "localhost",
  database: System.get_env("DB_NAME") || "geo_fleetic_prod",
  pool_size: String.to_integer(System.get_env("DB_POOL_SIZE") || "20"),
  ssl: System.get_env("DB_SSL") == "true",
  # PostGIS configuration
  extensions: [{Geo.PostGIS.Extension, library: Geo}],
  # Production database optimizations
  queue_target: 5000,
  queue_interval: 1000

# ## SSL Support
#
# To get SSL working, you will need to add the `https` configuration
# to the previous `http` configuration and set `force_ssl` to `true`.
#
#     config :geo_fleetic, GeoFleeticWeb.Endpoint,
#       force_ssl: [hsts: true],
#       https: [
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("PRIV_KEY_FILE"),
#         certfile: System.get_env("CERT_FILE")
#       ]

# ## Configuring the mailer
#
# In production you need to configure the mailer to use a different adapter.
# Also, you may need to configure the Swoosh API client.
#
#     config :swoosh, :api_client, YourApp.Swoosh.ApiClient
#
# For this example you can use the "Local" adapter.
#
#     config :swoosh, adapter: Swoosh.Adapters.Local

# Configure Oban for background job processing
config :geo_fleetic, Oban,
  repo: GeoFleetic.Repo,
  plugins: [
    {Oban.Plugins.Pruner, max_age: 60 * 60 * 24 * 7}, # 7 days
    {Oban.Plugins.Cron,
     crontab: [
       {"0 * * * *", GeoFleetic.Workers.MetricsCollector},
       {"*/5 * * * *", GeoFleetic.Workers.HealthCheck}
     ]}
  ],
  queues: [
    default: 10,
    events: 20,
    analytics: 5
  ]

# Configure Phoenix PubSub for clustering
config :geo_fleetic, GeoFleetic.PubSub,
  adapter: Phoenix.PubSub.PG2,
  name: GeoFleetic.PubSub

# Configure logging
config :logger,
  level: :info,
  backends: [:console, Sentry.LoggerBackend]

# Configure Sentry for error tracking
config :sentry,
  dsn: System.get_env("SENTRY_DSN"),
  environment_name: System.get_env("ENVIRONMENT") || "production",
  enable_source_code_context: true,
  root_source_code_path: File.cwd!(),
  tags: %{
    env: "production"
  }

# Configure telemetry
config :geo_fleetic, GeoFleeticWeb.Telemetry,
  metrics: [
    # Phoenix metrics
    Phoenix.Telemetry.Metrics.Phoenix,
    # Database metrics
    GeoFleetic.Telemetry.DatabaseMetrics,
    # Application metrics
    GeoFleetic.Telemetry.ApplicationMetrics
  ]

# Configure clustering
config :libcluster,
  topologies: [
    geo_fleetic: [
      strategy: Cluster.Strategy.Kubernetes,
      config: [
        kubernetes_node_basename: "geo_fleetic",
        kubernetes_selector: "app=geo_fleetic",
        kubernetes_namespace: System.get_env("NAMESPACE") || "default"
      ]
    ]
  ]

# Configure caching
config :geo_fleetic, GeoFleetic.Cache,
  gc_interval: :timer.seconds(3600), # 1 hour
  max_size: 1_000_000, # 1MB
  compressed: true

# Configure rate limiting
config :hammer,
  backend: {Hammer.Backend.ETS, [cleanup_interval: :timer.minutes(10)]}

# Production secrets
config :geo_fleetic, GeoFleeticWeb.Endpoint,
  secret_key_base: System.get_env("SECRET_KEY_BASE")

# Disable code reloading and debugging
config :phoenix, :code_reloader, false
config :phoenix, :debug_errors, false
config :phoenix, :stacktrace_depth, 20

# Configure static file serving
config :geo_fleetic, GeoFleeticWeb.Endpoint,
  static_url: [path: System.get_env("STATIC_URL_PATH")],
  gzip: [compress: true]

# Configure Swoosh
config :swoosh, :api_client, Swoosh.ApiClient.Finch

# Configure Finch for external API calls
config :finch,
  name: GeoFleetic.Finch,
  pools: %{
    "https://api.example.com" => [size: 10],
    :default => [size: 5]
  }
